# -*- coding: utf-8 -*-
"""Untitled59.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gG1PJYQtZkTYcUUO8Epie_gHuZTwj7Qz
"""

import googleapiclient.discovery
import googleapiclient.errors

api_service_name = "youtube"
api_version = "v3"
DEVELOPER_KEY = "AIzaSyAJHdUHbT_76mAjD5swArV1PRygzWtosv4"

youtube = googleapiclient.discovery.build(
    api_service_name, api_version, developerKey=DEVELOPER_KEY)

request = youtube.commentThreads().list(
    part="snippet",
    videoId="d1O2TnjiA5g",
    maxResults=100
)
response = request.execute()

for item in response['items']:
    print(item['snippet']['topLevelComment']['snippet']['textDisplay'])

import googleapiclient.discovery
import pandas as pd

api_service_name = "youtube"
api_version = "v3"
DEVELOPER_KEY = "AIzaSyAJHdUHbT_76mAjD5swArV1PRygzWtosv4"

youtube = googleapiclient.discovery.build(
    api_service_name, api_version, developerKey=DEVELOPER_KEY)

request = youtube.commentThreads().list(
    part="snippet",
    videoId="d1O2TnjiA5g",
    maxResults=100
)
response = request.execute()

comments = []

for item in response['items']:
    comment = item['snippet']['topLevelComment']['snippet']
    comments.append([
        comment['authorDisplayName'],
        comment['publishedAt'],
        comment['updatedAt'],
        comment['likeCount'],
        comment['textDisplay']
    ])

df = pd.DataFrame(comments, columns=['author', 'published_at', 'updated_at', 'like_count', 'text'])

df.head(10)

df

df.tail()

df.mode()

df.describe()

df.info()

df.isnull().sum()

df.duplicated().sum()

composition_value_counts = df['author'].value_counts()
composition_value_counts

import matplotlib.pyplot as plt
# Bar plot of the top 10 most frequent authors
composition_value_counts.head(10).plot(kind='bar')
plt.xlabel('Author')
plt.ylabel('Count')
plt.title('Top 10 Most Frequent Authors')
plt.show()

# Pie chart of the top 5 most frequent authors
composition_value_counts.head(5).plot(kind='pie', autopct='%1.1f%%')
plt.title('Top 5 Most Frequent Authors')
plt.show()

import matplotlib.pyplot as plt

df_sorted = df.sort_values(by='like_count', ascending=True)

top_5_authors = df_sorted['author'].value_counts().head(5)

fig, ax = plt.subplots(figsize=(10, 7))

ax.pie(top_5_authors, labels=top_5_authors.index, autopct="%1.1f%%", startangle=90)

ax.set_title("Top 5 Authors with Most Likes (Ascending Order)")

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Extract the day from the 'published_at' column
df['day'] = pd.to_datetime(df['published_at']).dt.day_name()

# Group the data by day and count the number of comments
comments_by_day = df.groupby('day')['text'].count()

# Create a pie chart
plt.pie(comments_by_day, labels=comments_by_day.index, autopct="%1.1f%%")
plt.title('Comments per Day')
plt.show()

import matplotlib.pyplot as plt
from textblob import TextBlob

# Create a function to analyze the sentiment of a text
def analyze_sentiment(text):
  analysis = TextBlob(text)
  sentiment = analysis.sentiment.polarity
  return sentiment

# Apply the function to the 'text' column and create a new column 'sentiment'
df['sentiment'] = df['text'].apply(analyze_sentiment)

# Display the head of the DataFrame
df.head()

# Count the number of positive, negative, and neutral comments
positive_comments = df[df['sentiment'] > 0].shape[0]
negative_comments = df[df['sentiment'] < 0].shape[0]
neutral_comments = df[df['sentiment'] == 0].shape[0]

# Create a pie chart to visualize the sentiment distribution
labels = ['Positive', 'Negative', 'Neutral']
sizes = [positive_comments, negative_comments, neutral_comments]
colors = ['green', 'red', 'yellow']

plt.pie(sizes, labels=labels, colors=colors, autopct="%1.1f%%")
plt.title('Sentiment Distribution')
plt.show()

def analyze_sentiment(text):
  analysis = TextBlob(text)
  sentiment = analysis.sentiment.polarity
  if sentiment > 0:
    return "Positive"
  elif sentiment < 0:
    return "Negative"
  else:
    return "Neutral"

df['Sentiment'] = df['text'].apply(analyze_sentiment)

df.head()

def analyze_sentiment(text):
  analysis = TextBlob(text)
  sentiment = analysis.sentiment.polarity
  if sentiment > 0:
    return "Positive"
  elif sentiment < 0:
    return "Negative"
  else:
    return "Neutral"

# Example usage
text = "This is a wonderful product! I love it!"
sentiment = analyze_sentiment(text)
print(sentiment)  # Output: "Positive"

text = "This product is terrible. I hate it!"
sentiment = analyze_sentiment(text)
print(sentiment)  # Output: "Negative"

text = "This product is okay. It's not great, but it's not bad either."
sentiment = analyze_sentiment(text)
print(sentiment)  # Output: "Neutral"

df['text']

# Example usage
text = "   Good job sir ji 👍"
sentiment = analyze_sentiment(text)
print(sentiment)  # Output: "Positive"

text = "Electric cars are an unsustainable scam there’..."
sentiment = analyze_sentiment(text)
print(sentiment)

text = "maybe we should back to ride horses like cowbo...."
sentiment = analyze_sentiment(text)
print(sentiment)  # Output: "Neutral"

import matplotlib.pyplot as plt

# Calculate the length of each comment
df['text_length'] = df['text'].str.len()

# Create a bar plot of comment lengths
plt.bar(df.index, df['text_length'])
plt.xlabel('Comment Index')
plt.ylabel('Comment Length')
plt.title('Comment Lengths')
plt.show()

# Create a line plot of comment lengths
plt.plot(df.index, df['text_length'])
plt.xlabel('Comment Index')
plt.ylabel('Comment Length')
plt.title('Comment Lengths')
plt.show()

# prompt: deploy it using streamlit







# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py

# Step 1: Install Streamlit and nbformat



st.title('Simple Streamlit App')
st.write('Hello, Streamlit!')

# Step 2: Write the Streamlit app to display the notebook


import nbformat

# Function to read and display the notebook
def display_notebook(notebook_path):
    with open(notebook_path, 'r', encoding='utf-8') as f:
        notebook_content = nbformat.read(f, as_version=4)

    st.write(notebook_content)

# Streamlit app
# Display the notebook
notebook_path = r"/content/Untitled59.ipynb"
display_notebook(notebook_path)

